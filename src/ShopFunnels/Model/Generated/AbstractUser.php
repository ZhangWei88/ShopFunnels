<?php
declare(strict_types=1);

namespace ShopFunnels\Model\Generated;

use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use ShopFunnels\Model\Role;
use TheCodingMachine\TDBM\AbstractTDBMObject;

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the User class instead!
 */

/**
 * The AbstractUser class maps the 'users' table in database.
 */
abstract class AbstractUser extends AbstractTDBMObject implements \JsonSerializable
{
    /**
     * The constructor takes all compulsory arguments.
     *
     * @param string $login
     * @param string $password
     * @param string $email
     */
    public function __construct(string $login, string $password, string $email)
    {
        parent::__construct();
        $this->setLogin($login);
        $this->setPassword($password);
        $this->setEmail($email);
        $this->setId((string) Uuid::uuid1());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'users');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'users');
    }

    /**
     * The getter for the "login" column.
     *
     * @return string
     */
    public function getLogin() : string
    {
        return $this->get('login', 'users');
    }

    /**
     * The setter for the "login" column.
     *
     * @param string $login
     */
    public function setLogin(string $login) : void
    {
        $this->set('login', $login, 'users');
    }

    /**
     * The getter for the "password" column.
     *
     * @return string
     */
    public function getPassword() : string
    {
        return $this->get('password', 'users');
    }

    /**
     * The setter for the "password" column.
     *
     * @param string $password
     */
    public function setPassword(string $password) : void
    {
        $this->set('password', $password, 'users');
    }

    /**
     * The getter for the "email" column.
     *
     * @return string
     */
    public function getEmail() : string
    {
        return $this->get('email', 'users');
    }

    /**
     * The setter for the "email" column.
     *
     * @param string $email
     */
    public function setEmail(string $email) : void
    {
        $this->set('email', $email, 'users');
    }

    /**
     * The getter for the "token" column.
     *
     * @return string|null
     */
    public function getToken() : ?string
    {
        return $this->get('token', 'users');
    }

    /**
     * The setter for the "token" column.
     *
     * @param string|null $token
     */
    public function setToken(?string $token) : void
    {
        $this->set('token', $token, 'users');
    }

    /**
     * The getter for the "lastname" column.
     *
     * @return string|null
     */
    public function getLastname() : ?string
    {
        return $this->get('lastname', 'users');
    }

    /**
     * The setter for the "lastname" column.
     *
     * @param string|null $lastname
     */
    public function setLastname(?string $lastname) : void
    {
        $this->set('lastname', $lastname, 'users');
    }

    /**
     * The getter for the "firstname" column.
     *
     * @return string|null
     */
    public function getFirstname() : ?string
    {
        return $this->get('firstname', 'users');
    }

    /**
     * The setter for the "firstname" column.
     *
     * @param string|null $firstname
     */
    public function setFirstname(?string $firstname) : void
    {
        $this->set('firstname', $firstname, 'users');
    }

    /**
     * Returns the list of Role associated to this bean via the users_roles pivot table.
     *
     * @return Role[]
     */
    public function getRoles() : array
    {
        return $this->_getRelationships('users_roles');
    }
    /**
     * Adds a relationship with Role associated to this bean via the users_roles pivot table.
     *
     * @param Role $role
     */
    public function addRole(Role $role) : void
    {
        $this->addRelationship('users_roles', $role);
    }
    /**
     * Deletes the relationship with Role associated to this bean via the users_roles pivot table.
     *
     * @param Role $role
     */
    public function removeRole(Role $role) : void
    {
        $this->_removeRelationship('users_roles', $role);
    }
    /**
     * Returns whether this bean is associated with Role via the users_roles pivot table.
     *
     * @param Role $role
     * @return bool
     */
    public function hasRole(Role $role) : bool
    {
        return $this->hasRelationship('users_roles', $role);
    }
    /**
     * Sets all relationships with Role associated to this bean via the users_roles pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param Role[] $roles
     */
    public function setRoles(array $roles) : void
    {
        $this->setRelationships('users_roles', $roles);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize($stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        $array['login'] = $this->getLogin();
        $array['password'] = $this->getPassword();
        $array['email'] = $this->getEmail();
        $array['token'] = $this->getToken();
        $array['lastname'] = $this->getLastname();
        $array['firstname'] = $this->getFirstname();

        if (!$stopRecursion) {
            $array['roles'] = array_map(function (Role $role) {
                return $role->jsonSerialize(true);
            }, $this->getRoles());
        }

        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child relationship).
     *
     * @return string[]
     */
    protected function getUsedTables() : array
    {
        return [ 'users' ];
    }

    public function __clone()
    {
        parent::__clone();
        $this->setId((string) Uuid::uuid1());
    }
}
