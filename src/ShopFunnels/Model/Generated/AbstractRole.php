<?php
declare(strict_types=1);

namespace ShopFunnels\Model\Generated;

use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use ShopFunnels\Model\RoleRight;
use ShopFunnels\Model\User;
use TheCodingMachine\TDBM\AbstractTDBMObject;

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the Role class instead!
 */

/**
 * The AbstractRole class maps the 'roles' table in database.
 */
abstract class AbstractRole extends AbstractTDBMObject implements \JsonSerializable
{
    /**
     * The constructor takes all compulsory arguments.
     *
     * @param string $label
     */
    public function __construct(string $label)
    {
        parent::__construct();
        $this->setLabel($label);
        $this->setId((string) Uuid::uuid1());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'roles');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'roles');
    }

    /**
     * The getter for the "label" column.
     *
     * @return string
     */
    public function getLabel() : string
    {
        return $this->get('label', 'roles');
    }

    /**
     * The setter for the "label" column.
     *
     * @param string $label
     */
    public function setLabel(string $label) : void
    {
        $this->set('label', $label, 'roles');
    }

    /**
     * Returns the list of RoleRight pointing to this bean via the role_id column.
     *
     * @return RoleRight[]|AlterableResultIterator
     */
    public function getRolesRights() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('roles_rights', 'FK_EA47E462D60322AC', 'roles_rights', ['roles_rights.role_id' => $this->get('id', 'roles')]);
    }

    /**
     * Returns the list of User associated to this bean via the users_roles pivot table.
     *
     * @return User[]
     */
    public function getUsers() : array
    {
        return $this->_getRelationships('users_roles');
    }
    /**
     * Adds a relationship with User associated to this bean via the users_roles pivot table.
     *
     * @param User $user
     */
    public function addUser(User $user) : void
    {
        $this->addRelationship('users_roles', $user);
    }
    /**
     * Deletes the relationship with User associated to this bean via the users_roles pivot table.
     *
     * @param User $user
     */
    public function removeUser(User $user) : void
    {
        $this->_removeRelationship('users_roles', $user);
    }
    /**
     * Returns whether this bean is associated with User via the users_roles pivot table.
     *
     * @param User $user
     * @return bool
     */
    public function hasUser(User $user) : bool
    {
        return $this->hasRelationship('users_roles', $user);
    }
    /**
     * Sets all relationships with User associated to this bean via the users_roles pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param User[] $users
     */
    public function setUsers(array $users) : void
    {
        $this->setRelationships('users_roles', $users);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize($stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        $array['label'] = $this->getLabel();

        if (!$stopRecursion) {
            $array['users'] = array_map(function (User $user) {
                return $user->jsonSerialize(true);
            }, $this->getUsers());
        }

        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child relationship).
     *
     * @return string[]
     */
    protected function getUsedTables() : array
    {
        return [ 'roles' ];
    }

    public function __clone()
    {
        parent::__clone();
        $this->setId((string) Uuid::uuid1());
    }
}
